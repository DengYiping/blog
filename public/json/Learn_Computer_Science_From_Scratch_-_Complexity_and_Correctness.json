{"date": "2018-08-05 21:13", "md": "## Complexity\n\n> Complexity is an abstract measurer of computational effort and memory usage.\nThis simple definition tells us that the complexity of a algorithm can be break into two part:\n\n*   **Time complexity**\n*   **Space complexity**\nTo analyse the time complexity of a algorithm, we usually analyse the order of growth:\n\n1.  Constant: using the same amount of time no matter the inputs.\n2.  Linear: the time grows linearly with the size of the input.\n3.  Logarithm\n4.  Linearithmic( or log-linear)\n5.  Quadratic: Might be a little annoying starting here.\n6.  Polynomial\n7.  Exponential: We don't want it, it is not scalable at all.\nA good algorithm should be scalable according to the definition of the algorithm.\n\nThe space complexity is similar, and we also use order of growth to analyse it.\n\n## Correctness\n\nAs a computer scientist, we often want to write a correct algorithms, and correctness is a important part.\n\nFirst, I should give you the definition of **partial correctness.**\n> An algorithm in a state that satisfies a precondition P is partially correct with respect to P and Q if results produced by the algorithm satisfy the postcondition Q.\nNote that a algorithm is partially correct does not mean that it will give you a correct result. It actually means that if the algorithm produced a result, it will be correct, which implies that this algorithm may not give you a result.\n\nNow we can move forward to** total correctness.** Total correct algorithm is a partially correct algorithm that always gives a result.", "title": "Learn Computer Science From Scratch - Complexity and Correctness"}